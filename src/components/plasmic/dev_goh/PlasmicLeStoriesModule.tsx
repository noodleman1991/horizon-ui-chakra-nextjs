// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x1BtAZcYDoHQadMwGq1GLr
// Component: MInrjXf-9syk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantsxIrZdHvFaFjh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xIrZDHvFaFjh/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x1BtAZcYDoHQadMwGq1GLr/projectcss
import sty from "./PlasmicLeStoriesModule.module.css"; // plasmic-import: MInrjXf-9syk/css

createPlasmicElementProxy;

export type PlasmicLeStoriesModule__VariantMembers = {};
export type PlasmicLeStoriesModule__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeStoriesModule__VariantsArgs;
export const PlasmicLeStoriesModule__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLeStoriesModule__ArgsType = {};
type ArgPropType = keyof PlasmicLeStoriesModule__ArgsType;
export const PlasmicLeStoriesModule__ArgProps = new Array<ArgPropType>();

export type PlasmicLeStoriesModule__OverridesType = {
  leStories?: Flex__<"section">;
  section?: Flex__<"section">;
};

export interface DefaultLeStoriesModuleProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLeStoriesModule__RenderFunc(props: {
  variants: PlasmicLeStoriesModule__VariantsArgs;
  args: PlasmicLeStoriesModule__ArgsType;
  overrides: PlasmicLeStoriesModule__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $translator = usePlasmicTranslator?.();
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxIrZdHvFaFjh()
  });

  return (
    <section
      data-plasmic-name={"leStories"}
      data-plasmic-override={overrides.leStories}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.leStories
      )}
    >
      <div className={classNames(projectcss.all, sty.columns___5WsOj)}>
        <div className={classNames(projectcss.all, sty.column__hqk1)}>
          <div className={classNames(projectcss.all, sty.columns__qwrHm)}>
            <div className={classNames(projectcss.all, sty.column__pzy5Y)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qEwf6
                )}
              >
                <Trans__>{"Stories of grief, resilience and hope "}</Trans__>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9IodX
                )}
              >
                <Trans__>
                  {
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {
                          "We believe that lived experience is essential to navigating the unprecedented comonding crises of mental health and climate change. Browse our library of personal stories from people across the globe, providing invaluable insights into impacts and solutions. "
                        }
                      </span>
                    </React.Fragment>
                  }
                </Trans__>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__wuxRt)}>
              <AntdButton
                className={classNames("__wab_instance", sty.button__t5OHe)}
                danger={false}
                ghost={false}
                size={"small"}
                type={"ghost"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7R5NS
                  )}
                >
                  <Trans__>{"Explore Library"}</Trans__>
                </div>
              </AntdButton>
            </div>
          </div>
        </div>
      </div>
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns__trVqz)}
        >
          <div className={classNames(projectcss.all, sty.column___6XTny)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__gOot5)}
              displayHeight={"176px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"397px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/dev_goh/images/leVideo1Png2.png",
                fullWidth: 1387,
                fullHeight: 1387,
                aspectRatio: undefined
              }}
            />

            <AntdButton
              className={classNames("__wab_instance", sty.button__iXt6)}
              shape={"round"}
              type={"ghost"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k0OAn
                )}
              >
                <Trans__>{"VIDEO"}</Trans__>
              </div>
            </AntdButton>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rwujk
              )}
            >
              <Trans__>{"This is the LE  story video title"}</Trans__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column___8DniS)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___6Jxt)}
              displayHeight={"176px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"397px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/dev_goh/images/leVideo3Png4.png",
                fullWidth: 1387,
                fullHeight: 1387,
                aspectRatio: undefined
              }}
            />

            <AntdButton
              className={classNames("__wab_instance", sty.button__xAWzB)}
              shape={"round"}
              type={"ghost"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lhTag
                )}
              >
                <Trans__>{"VIDEO"}</Trans__>
              </div>
            </AntdButton>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tc
              )}
            >
              <Trans__>{"This is the LE  story video title"}</Trans__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__blSxd)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__l4JMc)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "262px"
                  : "176px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"397px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/dev_goh/images/leVideo2Png2.png",
                fullWidth: 1387,
                fullHeight: 1387,
                aspectRatio: undefined
              }}
            />

            <AntdButton
              className={classNames("__wab_instance", sty.button___6UWmj)}
              shape={"round"}
              type={"ghost"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hKucz
                )}
              >
                <Trans__>{"AUDIO"}</Trans__>
              </div>
            </AntdButton>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zv67
              )}
            >
              <Trans__>{"This is the LE  story audio title"}</Trans__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__dLj4V)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___2ZaD)}
              displayHeight={"176px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"397px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/dev_goh/images/leVideo4Png2.png",
                fullWidth: 1387,
                fullHeight: 1387,
                aspectRatio: undefined
              }}
            />

            <AntdButton
              className={classNames("__wab_instance", sty.button___1T9Fo)}
              shape={"round"}
              type={"ghost"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kGWO
                )}
              >
                <Trans__>{"VIDEO"}</Trans__>
              </div>
            </AntdButton>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uiMbR
              )}
            >
              <Trans__>{"This is the LE  story video title"}</Trans__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__ptZwh)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ydNy8)}
              displayHeight={"176px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"397px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/dev_goh/images/leVideo5Png3.png",
                fullWidth: 1387,
                fullHeight: 1387,
                aspectRatio: undefined
              }}
            />

            <AntdButton
              className={classNames("__wab_instance", sty.button__utcbm)}
              shape={"round"}
              type={"ghost"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ilo
                )}
              >
                <Trans__>{"AUDIO"}</Trans__>
              </div>
            </AntdButton>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1BO20
              )}
            >
              <Trans__>{"This is the LE  story audio title"}</Trans__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__gXCws)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__m1XzW)}
              displayHeight={"176px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"397px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/dev_goh/images/leVideo6Png.png",
                fullWidth: 1387,
                fullHeight: 1387,
                aspectRatio: undefined
              }}
            />

            <AntdButton
              className={classNames("__wab_instance", sty.button__qaTL)}
              shape={"round"}
              type={"ghost"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tn3VD
                )}
              >
                <Trans__>{"VIDEO"}</Trans__>
              </div>
            </AntdButton>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jag8O
              )}
            >
              <Trans__>{"This is the LE  story video title"}</Trans__>
            </div>
          </div>
        </Stack__>
      </section>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  leStories: ["leStories", "section"],
  section: ["section"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  leStories: "section";
  section: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeStoriesModule__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeStoriesModule__VariantsArgs;
    args?: PlasmicLeStoriesModule__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeStoriesModule__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLeStoriesModule__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeStoriesModule__ArgProps,
          internalVariantPropNames: PlasmicLeStoriesModule__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLeStoriesModule__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "leStories") {
    func.displayName = "PlasmicLeStoriesModule";
  } else {
    func.displayName = `PlasmicLeStoriesModule.${nodeName}`;
  }
  return func;
}

export const PlasmicLeStoriesModule = Object.assign(
  // Top-level PlasmicLeStoriesModule renders the root element
  makeNodeComponent("leStories"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),

    // Metadata about props expected for PlasmicLeStoriesModule
    internalVariantProps: PlasmicLeStoriesModule__VariantProps,
    internalArgProps: PlasmicLeStoriesModule__ArgProps
  }
);

export default PlasmicLeStoriesModule;
/* prettier-ignore-end */
