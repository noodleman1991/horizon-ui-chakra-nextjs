// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x1BtAZcYDoHQadMwGq1GLr
// Component: Ytwgl3TqcAVu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PageLayout from "../../PageLayout"; // plasmic-import: aFU8osBh9vPy/component
import SubpageHeader from "../../SubpageHeader"; // plasmic-import: lpLjDJwsHcxv/component
import InfoModuleRight from "../../InfoModuleRight"; // plasmic-import: Y3yqKabe7t4u/component
import InfoModuleLeft2 from "../../InfoModuleLeft2"; // plasmic-import: 4IQmciLZjLat/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import PartnerLogos from "../../PartnerLogos"; // plasmic-import: tGmi9MLpd58b/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x1BtAZcYDoHQadMwGq1GLr/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: Ytwgl3TqcAVu/css

createPlasmicElementProxy;

export type PlasmicAbout__VariantMembers = {};
export type PlasmicAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout__VariantsArgs;
export const PlasmicAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAbout__ArgsType;
export const PlasmicAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  subpageHeader?: Flex__<typeof SubpageHeader>;
  infoModuleRight?: Flex__<typeof InfoModuleRight>;
  infoModuleLeft2?: Flex__<typeof InfoModuleLeft2>;
  button?: Flex__<typeof AntdButton>;
  partnerLogos?: Flex__<typeof PartnerLogos>;
};

export interface DefaultAboutProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbout__RenderFunc(props: {
  variants: PlasmicAbout__VariantsArgs;
  args: PlasmicAbout__ArgsType;
  overrides: PlasmicAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $translator = usePlasmicTranslator?.();
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <SubpageHeader
                    data-plasmic-name={"subpageHeader"}
                    data-plasmic-override={overrides.subpageHeader}
                    className={classNames("__wab_instance", sty.subpageHeader)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vSmQg
                        )}
                      >
                        <Trans__>
                          {
                            <React.Fragment>
                              <React.Fragment>
                                {"Below you'll find the "}
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {
                                  "story of how Connecting Climate Minds came to be"
                                }
                              </span>
                              <React.Fragment>
                                {
                                  ", our mission, and the passionate team behind our quest to integrate mental health and climate change research and action."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          }
                        </Trans__>
                      </div>
                    }
                    slot2={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___6Y7Yc)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"274px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/dev_goh/images/hubAboutpng.png",
                          fullWidth: 6097,
                          fullHeight: 5860,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    <Trans__>
                      {"The Journey of Connecting Climate Minds"}
                    </Trans__>
                  </SubpageHeader>
                  <InfoModuleRight
                    data-plasmic-name={"infoModuleRight"}
                    data-plasmic-override={overrides.infoModuleRight}
                    className={classNames(
                      "__wab_instance",
                      sty.infoModuleRight
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mljqa
                        )}
                      >
                        <Trans__>
                          {
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 500 }}
                              >
                                {
                                  "What is Connecting Climate Minds all about? The short answer: Connection. Connecting Climate Minds is working to foster connections between people all over the world to come together to understand and respond to the deep interconnections between climate change and mental health. Our core aims are to 1) develop an aligned and inclusive agenda for research and action, grounded in lived experience expertise of mental health challenges in the context of climate change, and 2) build connected communities of practice for climate change and mental health in seven global regions, equipped to enact this agenda. "
                                }
                              </span>
                            </React.Fragment>
                          }
                        </Trans__>
                      </div>
                    }
                    slot2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mxdSa
                        )}
                      >
                        <Trans__>{"Learn more "}</Trans__>
                      </div>
                    }
                    slot3={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__vNql)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"316px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/dev_goh/images/peoplepng.png",
                          fullWidth: 1370,
                          fullHeight: 981,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wzeJc
                      )}
                    >
                      <Trans__>
                        {
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-qrT8uUlt7cMG)" }}
                            >
                              {"Connecting Climate Minds Project "}
                            </span>
                          </React.Fragment>
                        }
                      </Trans__>
                    </div>
                  </InfoModuleRight>
                  <InfoModuleLeft2
                    data-plasmic-name={"infoModuleLeft2"}
                    data-plasmic-override={overrides.infoModuleLeft2}
                    className={classNames(
                      "__wab_instance",
                      sty.infoModuleLeft2
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s4S72
                        )}
                      >
                        <Trans__>
                          {
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 500 }}
                              >
                                {
                                  "The Connecting Climate Minds Hub is an innovative digital platform designed to unite the fields of mental health and climate change. It serves as a collaborative space for researchers, policymakers, educators, and community groups to share knowledge, resources, and experiences. Its aim is to foster understanding, encourage interdisciplinary collaboration, and drive impactful action, all while providing a supportive community for those dedicated to these critical global issues."
                                }
                              </span>
                            </React.Fragment>
                          }
                        </Trans__>
                      </div>
                    }
                    slot2={
                      <AntdButton
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        danger={false}
                        ghost={false}
                        size={"medium"}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ci8VY
                          )}
                        >
                          <Trans__>{"How to use Hub"}</Trans__>
                        </div>
                      </AntdButton>
                    }
                    slot3={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___6Z5Ov)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"316px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/dev_goh/images/hubWelcomeToTheHubV2Png.png",
                          fullWidth: 5860,
                          fullHeight: 6097,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hhg4I
                      )}
                    >
                      <Trans__>{"Connecting Climate Minds Hub  "}</Trans__>
                    </div>
                  </InfoModuleLeft2>
                  <PartnerLogos
                    data-plasmic-name={"partnerLogos"}
                    data-plasmic-override={overrides.partnerLogos}
                    className={classNames("__wab_instance", sty.partnerLogos)}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "subpageHeader",
    "infoModuleRight",
    "infoModuleLeft2",
    "button",
    "partnerLogos"
  ],
  pageLayout: [
    "pageLayout",
    "subpageHeader",
    "infoModuleRight",
    "infoModuleLeft2",
    "button",
    "partnerLogos"
  ],
  subpageHeader: ["subpageHeader"],
  infoModuleRight: ["infoModuleRight"],
  infoModuleLeft2: ["infoModuleLeft2", "button"],
  button: ["button"],
  partnerLogos: ["partnerLogos"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  subpageHeader: typeof SubpageHeader;
  infoModuleRight: typeof InfoModuleRight;
  infoModuleLeft2: typeof InfoModuleLeft2;
  button: typeof AntdButton;
  partnerLogos: typeof PartnerLogos;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout__VariantsArgs;
    args?: PlasmicAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAbout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"x1BtAZcYDoHQadMwGq1GLr"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    subpageHeader: makeNodeComponent("subpageHeader"),
    infoModuleRight: makeNodeComponent("infoModuleRight"),
    infoModuleLeft2: makeNodeComponent("infoModuleLeft2"),
    button: makeNodeComponent("button"),
    partnerLogos: makeNodeComponent("partnerLogos"),

    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
