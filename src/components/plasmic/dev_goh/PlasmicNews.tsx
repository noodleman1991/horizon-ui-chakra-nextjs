// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x1BtAZcYDoHQadMwGq1GLr
// Component: ydKScTu6CZdv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PageLayout from "../../PageLayout"; // plasmic-import: aFU8osBh9vPy/component
import SubpageHeader from "../../SubpageHeader"; // plasmic-import: lpLjDJwsHcxv/component
import NewsCardLarge from "../../NewsCardLarge"; // plasmic-import: D7qJMaOYRZ5K/component
import { SanityFetcher } from "@plasmicpkgs/plasmic-sanity-io";
import { SanityField } from "@plasmicpkgs/plasmic-sanity-io";
import NewsCardSmall from "../../NewsCardSmall"; // plasmic-import: 9xivxL9ZpqQa/component
import NewsCardRow from "../../NewsCardRow"; // plasmic-import: 5AhTJka5kXTV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsxIrZdHvFaFjh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xIrZDHvFaFjh/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x1BtAZcYDoHQadMwGq1GLr/projectcss
import sty from "./PlasmicNews.module.css"; // plasmic-import: ydKScTu6CZdv/css

createPlasmicElementProxy;

export type PlasmicNews__VariantMembers = {};
export type PlasmicNews__VariantsArgs = {};
type VariantPropType = keyof PlasmicNews__VariantsArgs;
export const PlasmicNews__VariantProps = new Array<VariantPropType>();

export type PlasmicNews__ArgsType = {};
type ArgPropType = keyof PlasmicNews__ArgsType;
export const PlasmicNews__ArgProps = new Array<ArgPropType>();

export type PlasmicNews__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  subpageHeader?: Flex__<typeof SubpageHeader>;
  newsCardLarge?: Flex__<typeof NewsCardLarge>;
  sanityFetcher?: Flex__<typeof SanityFetcher>;
  sanityField?: Flex__<typeof SanityField>;
};

export interface DefaultNewsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNews__RenderFunc(props: {
  variants: PlasmicNews__VariantsArgs;
  args: PlasmicNews__ArgsType;
  overrides: PlasmicNews__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $translator = usePlasmicTranslator?.();
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxIrZdHvFaFjh()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    className={classNames(projectcss.all, sty.section___7Aj8S)}
                  >
                    <SubpageHeader
                      data-plasmic-name={"subpageHeader"}
                      data-plasmic-override={overrides.subpageHeader}
                      className={classNames(
                        "__wab_instance",
                        sty.subpageHeader
                      )}
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__juLfq
                          )}
                        >
                          <Trans__>
                            {
                              <React.Fragment>
                                <React.Fragment>
                                  {"Keeping you up-to-date with the "}
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"latest research and policy developments "}
                                </span>
                                <React.Fragment>
                                  {
                                    "at the intersection of mental health and climate change."
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            }
                          </Trans__>
                        </div>
                      }
                      slot2={
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__qxfcl)}
                          displayHeight={"179px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"274px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/dev_goh/images/hubNewsEventspng.png",
                            fullWidth: 8715,
                            fullHeight: 7619,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k5L1R
                        )}
                      >
                        <Trans__>
                          {
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-PY84l1C8mrNw)" }}
                              >
                                {"Latest "}
                              </span>
                              <React.Fragment>{""}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-n-FzbhxKb_Pn)" }}
                              >
                                {"news"}
                              </span>
                              <React.Fragment>{""}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-PY84l1C8mrNw)" }}
                              >
                                {" in the field"}
                              </span>
                            </React.Fragment>
                          }
                        </Trans__>
                      </div>
                    </SubpageHeader>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section___01RW)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.columns___71ARh
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__yqdYd
                        )}
                      >
                        <NewsCardLarge
                          data-plasmic-name={"newsCardLarge"}
                          data-plasmic-override={overrides.newsCardLarge}
                          className={classNames(
                            "__wab_instance",
                            sty.newsCardLarge
                          )}
                          slot={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4RZpZ
                              )}
                            >
                              <Trans__>{"Enter some text"}</Trans__>
                            </div>
                          }
                          slot2={
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__vfSou)}
                              displayHeight={"100%"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"90%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"50%"}
                              loading={"lazy"}
                            />
                          }
                        >
                          <SanityFetcher
                            data-plasmic-name={"sanityFetcher"}
                            data-plasmic-override={overrides.sanityFetcher}
                            className={classNames(
                              "__wab_instance",
                              sty.sanityFetcher
                            )}
                            noAutoRepeat={false}
                            noLayout={false}
                          >
                            <DataCtxReader__>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__caHfx
                                  )}
                                >
                                  <SanityField
                                    data-plasmic-name={"sanityField"}
                                    data-plasmic-override={
                                      overrides.sanityField
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.sanityField
                                    )}
                                  />
                                </div>
                              )}
                            </DataCtxReader__>
                          </SanityFetcher>
                        </NewsCardLarge>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__voyM1
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__l6Q5A
                          )}
                        >
                          <NewsCardSmall
                            className={classNames(
                              "__wab_instance",
                              sty.newsCardSmall__qlT4W
                            )}
                          />

                          <NewsCardSmall
                            className={classNames(
                              "__wab_instance",
                              sty.newsCardSmall__ovJ11
                            )}
                          />

                          <NewsCardSmall
                            className={classNames(
                              "__wab_instance",
                              sty.newsCardSmall__mr0Jj
                            )}
                          />
                        </Stack__>
                      </div>
                    </div>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__btmOy)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__bBsA)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__wozSf
                        )}
                      >
                        <NewsCardRow
                          className={classNames(
                            "__wab_instance",
                            sty.newsCardRow___8Kr2
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__sr0Jf
                        )}
                      >
                        <NewsCardRow
                          className={classNames(
                            "__wab_instance",
                            sty.newsCardRow__iyGkj
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___92JRw
                        )}
                      >
                        <NewsCardRow
                          className={classNames(
                            "__wab_instance",
                            sty.newsCardRow__hfwmp
                          )}
                        />
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.column__gSv5)}
                      >
                        <NewsCardRow
                          className={classNames(
                            "__wab_instance",
                            sty.newsCardRow__wCsd
                          )}
                        />
                      </div>
                    </Stack__>
                  </section>
                  <div
                    className={classNames(projectcss.all, sty.columns__qfnDn)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__ltt0A)}
                    >
                      <NewsCardRow
                        className={classNames(
                          "__wab_instance",
                          sty.newsCardRow__gK3NM
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__g9Ifh)}
                    >
                      <NewsCardRow
                        className={classNames(
                          "__wab_instance",
                          sty.newsCardRow__v2Nub
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___2ZR6)}
                    >
                      <NewsCardRow
                        className={classNames(
                          "__wab_instance",
                          sty.newsCardRow__pCrbo
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__nyLa)}
                    >
                      <NewsCardRow
                        className={classNames(
                          "__wab_instance",
                          sty.newsCardRow__cyvPj
                        )}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.columns__oRw1G)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__cCVi)}
                    >
                      <NewsCardRow
                        className={classNames(
                          "__wab_instance",
                          sty.newsCardRow__r7V3F
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__vywa0)}
                    >
                      <NewsCardRow
                        className={classNames(
                          "__wab_instance",
                          sty.newsCardRow__kfiwB
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__pParW)}
                    >
                      <NewsCardRow
                        className={classNames(
                          "__wab_instance",
                          sty.newsCardRow__bvIn3
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___6SpNr)}
                    >
                      <NewsCardRow
                        className={classNames(
                          "__wab_instance",
                          sty.newsCardRow__mvhSa
                        )}
                      />
                    </div>
                  </div>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "subpageHeader",
    "newsCardLarge",
    "sanityFetcher",
    "sanityField"
  ],
  pageLayout: [
    "pageLayout",
    "subpageHeader",
    "newsCardLarge",
    "sanityFetcher",
    "sanityField"
  ],
  subpageHeader: ["subpageHeader"],
  newsCardLarge: ["newsCardLarge", "sanityFetcher", "sanityField"],
  sanityFetcher: ["sanityFetcher", "sanityField"],
  sanityField: ["sanityField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  subpageHeader: typeof SubpageHeader;
  newsCardLarge: typeof NewsCardLarge;
  sanityFetcher: typeof SanityFetcher;
  sanityField: typeof SanityField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNews__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNews__VariantsArgs;
    args?: PlasmicNews__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNews__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNews__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNews__ArgProps,
          internalVariantPropNames: PlasmicNews__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNews__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNews";
  } else {
    func.displayName = `PlasmicNews.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"x1BtAZcYDoHQadMwGq1GLr"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicNews = Object.assign(
  // Top-level PlasmicNews renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    subpageHeader: makeNodeComponent("subpageHeader"),
    newsCardLarge: makeNodeComponent("newsCardLarge"),
    sanityFetcher: makeNodeComponent("sanityFetcher"),
    sanityField: makeNodeComponent("sanityField"),

    // Metadata about props expected for PlasmicNews
    internalVariantProps: PlasmicNews__VariantProps,
    internalArgProps: PlasmicNews__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNews;
/* prettier-ignore-end */
