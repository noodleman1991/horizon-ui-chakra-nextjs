// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x1BtAZcYDoHQadMwGq1GLr
// Component: ZHlEhd4G-ETv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import AgendaCard from "../../AgendaCard"; // plasmic-import: F27DgGdVuq-P/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x1BtAZcYDoHQadMwGq1GLr/projectcss
import sty from "./PlasmicAgendas.module.css"; // plasmic-import: ZHlEhd4G-ETv/css

createPlasmicElementProxy;

export type PlasmicAgendas__VariantMembers = {};
export type PlasmicAgendas__VariantsArgs = {};
type VariantPropType = keyof PlasmicAgendas__VariantsArgs;
export const PlasmicAgendas__VariantProps = new Array<VariantPropType>();

export type PlasmicAgendas__ArgsType = {};
type ArgPropType = keyof PlasmicAgendas__ArgsType;
export const PlasmicAgendas__ArgProps = new Array<ArgPropType>();

export type PlasmicAgendas__OverridesType = {
  ra?: Flex__<"section">;
  button?: Flex__<typeof AntdButton>;
  section?: Flex__<"section">;
};

export interface DefaultAgendasProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAgendas__RenderFunc(props: {
  variants: PlasmicAgendas__VariantsArgs;
  args: PlasmicAgendas__ArgsType;
  overrides: PlasmicAgendas__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $translator = usePlasmicTranslator?.();
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <section
      data-plasmic-name={"ra"}
      data-plasmic-override={overrides.ra}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.ra
      )}
    >
      <div className={classNames(projectcss.all, sty.columns__mqjx0)}>
        <div className={classNames(projectcss.all, sty.column__yQ5G)}>
          <div className={classNames(projectcss.all, sty.columns__auC8Z)}>
            <div className={classNames(projectcss.all, sty.column__l79IM)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uDmOw
                )}
              >
                <Trans__>
                  {
                    <React.Fragment>
                      <React.Fragment>{"Catalysing "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-n-FzbhxKb_Pn)" }}
                      >
                        {"interdisciplinary research to inform action"}
                      </span>
                      <React.Fragment>
                        {" in policy and practice"}
                      </React.Fragment>
                    </React.Fragment>
                  }
                </Trans__>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mcgkT
                )}
              >
                <Trans__>
                  {
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {
                          "Explore our rich repository of co-created research and action agendas, reports, case studies, lived experience insights and toolkits. All have been designed to support collaboration between disciplines and accelerate and align the growing field of climate change and mental health. "
                        }
                      </span>
                    </React.Fragment>
                  }
                </Trans__>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__wSqBr)}>
              <AntdButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                danger={false}
                ghost={false}
                href={`/research-action`}
                size={"small"}
                type={"ghost"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o2RIs
                  )}
                >
                  <Trans__>{"View more"}</Trans__>
                </div>
              </AntdButton>
            </div>
          </div>
        </div>
      </div>
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns__nDzXo)}
        >
          <div className={classNames(projectcss.all, sty.column__hdwwH)}>
            <AgendaCard
              className={classNames("__wab_instance", sty.agendaCard__prg9H)}
              slot={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__woKjm)}
                  displayHeight={"171px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/dev_goh/images/globalAgendapng.png",
                    fullWidth: 3840,
                    fullHeight: 2160,
                    aspectRatio: undefined
                  }}
                />
              }
              title={<Trans__>{"Global Agenda"}</Trans__>}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ypptC
                )}
              >
                <Trans__>
                  {
                    "The Global Research and Action Agenda for climate change and mental health sets out priorities for research and action that have been developed from dialogues and consultation with over 600 experts in research, policy, practice, and lived experience in 80+ countries. \n"
                  }
                </Trans__>
              </div>
            </AgendaCard>
          </div>
          <div className={classNames(projectcss.all, sty.column__hcIeh)}>
            <AgendaCard
              className={classNames("__wab_instance", sty.agendaCard__u5Q21)}
              slot={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ph5Bz)}
                  displayHeight={"171px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/dev_goh/images/regionalAgendaspng.png",
                    fullWidth: 3840,
                    fullHeight: 2160,
                    aspectRatio: undefined
                  }}
                />
              }
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__guiIz
                  )}
                >
                  <Trans__>{"Community Agendas"}</Trans__>
                </div>
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8DUeB
                )}
              >
                <Trans__>
                  {
                    "We recognize that population specific knowledge and research is needed to address the needs of range of contextual needs faced by  identified many different groups for whom climate change poses particular challenges for their mental health, and where people may have particular strengths and resiliences."
                  }
                </Trans__>
              </div>
            </AgendaCard>
          </div>
          <div className={classNames(projectcss.all, sty.column__nEgC)}>
            <AgendaCard
              className={classNames("__wab_instance", sty.agendaCard__gDhVd)}
              slot={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__k7thB)}
                  displayHeight={"171px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/dev_goh/images/thematicAgendaspng2.png",
                    fullWidth: 3840,
                    fullHeight: 2160,
                    aspectRatio: undefined
                  }}
                />
              }
              title={<Trans__>{"Regional Agendas"}</Trans__>}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k0Otq
                )}
              >
                <Trans__>
                  {
                    "The Regional Research and Action Agendas set out aligned and inclusive priorities for research and action in seven global regions (in line with the Sustainable Development Goal regional groupings), grounded in the needs of those experiencing and responding to climate-related mental health impacts."
                  }
                </Trans__>
              </div>
            </AgendaCard>
          </div>
        </Stack__>
      </section>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ra: ["ra", "button", "section"],
  button: ["button"],
  section: ["section"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ra: "section";
  button: typeof AntdButton;
  section: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAgendas__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAgendas__VariantsArgs;
    args?: PlasmicAgendas__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAgendas__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAgendas__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAgendas__ArgProps,
          internalVariantPropNames: PlasmicAgendas__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAgendas__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ra") {
    func.displayName = "PlasmicAgendas";
  } else {
    func.displayName = `PlasmicAgendas.${nodeName}`;
  }
  return func;
}

export const PlasmicAgendas = Object.assign(
  // Top-level PlasmicAgendas renders the root element
  makeNodeComponent("ra"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    section: makeNodeComponent("section"),

    // Metadata about props expected for PlasmicAgendas
    internalVariantProps: PlasmicAgendas__VariantProps,
    internalArgProps: PlasmicAgendas__ArgProps
  }
);

export default PlasmicAgendas;
/* prettier-ignore-end */
