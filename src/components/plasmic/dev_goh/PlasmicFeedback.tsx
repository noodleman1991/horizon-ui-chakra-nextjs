// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x1BtAZcYDoHQadMwGq1GLr
// Component: 8oVLHpnANCIc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PageLayout from "../../PageLayout"; // plasmic-import: aFU8osBh9vPy/component
import SubpageHeader from "../../SubpageHeader"; // plasmic-import: lpLjDJwsHcxv/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x1BtAZcYDoHQadMwGq1GLr/projectcss
import sty from "./PlasmicFeedback.module.css"; // plasmic-import: 8oVLHpnANCIc/css

createPlasmicElementProxy;

export type PlasmicFeedback__VariantMembers = {};
export type PlasmicFeedback__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeedback__VariantsArgs;
export const PlasmicFeedback__VariantProps = new Array<VariantPropType>();

export type PlasmicFeedback__ArgsType = {};
type ArgPropType = keyof PlasmicFeedback__ArgsType;
export const PlasmicFeedback__ArgProps = new Array<ArgPropType>();

export type PlasmicFeedback__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  subpageHeader?: Flex__<typeof SubpageHeader>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultFeedbackProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFeedback__RenderFunc(props: {
  variants: PlasmicFeedback__VariantsArgs;
  args: PlasmicFeedback__ArgsType;
  overrides: PlasmicFeedback__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $translator = usePlasmicTranslator?.();
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <SubpageHeader
                    data-plasmic-name={"subpageHeader"}
                    data-plasmic-override={overrides.subpageHeader}
                    className={classNames("__wab_instance", sty.subpageHeader)}
                    slot={
                      <Trans__>
                        {
                          "We'd love to hear what you think. Your insights help make the Connecting Climate Minds Hub even better and more attuned to our communities needs."
                        }
                      </Trans__>
                    }
                    slot2={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__dzmiY)}
                        displayHeight={"195px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"274px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/dev_goh/images/hubFeedbackpng.png",
                          fullWidth: 6097,
                          fullHeight: 5860,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    <Trans__>{"Your opinion matters"}</Trans__>
                  </SubpageHeader>
                  <section
                    className={classNames(projectcss.all, sty.section__zKj9W)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vF2Pd)}
                      displayHeight={"237px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"335px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/dev_goh/images/raiseAConcernpng.png",
                        fullWidth: 3840,
                        fullHeight: 3654,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iBUzb
                      )}
                    >
                      <Trans__>{"Raise a concerns or issue"}</Trans__>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rVpBr
                      )}
                    >
                      <Trans__>
                        {
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "Have you participated in any of the Connecting Climate Minds activities and do you have any concern, complaints or issues to raise? Please use this form. \n\nYou can fill out this form"
                              }
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {" anonymously or provide your contact details"}
                            </span>
                            <React.Fragment>
                              {
                                " and we can get back to you. The form will be monitored"
                              }
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {
                                " Monday - Friday 9am to 4pm Central European Time"
                              }
                            </span>
                            <React.Fragment>
                              {" by the IFRC Psychosocial Centre."}
                            </React.Fragment>
                          </React.Fragment>
                        }
                      </Trans__>
                    </div>
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      danger={false}
                      ghost={false}
                      href={
                        "https://imperial.eu.qualtrics.com/jfe/form/SV_1AE7EDdlNvhMv1s"
                      }
                      size={"medium"}
                      target={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wfvSf
                        )}
                      >
                        <Trans__>{"Fill out form"}</Trans__>
                      </div>
                    </AntdButton>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__wke3A)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__qcEh4)}
                      displayHeight={"237px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"320px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/dev_goh/images/generalFeedbackpng.png",
                        fullWidth: 3840,
                        fullHeight: 3654,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tR8FS
                      )}
                    >
                      <Trans__>{"Share general feedback"}</Trans__>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rizOv
                      )}
                    >
                      <Trans__>
                        {
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "Do you have general feedback or a question? Please get in touch with Nienke Meinsma at "
                              }
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{
                                fontWeight: 700,
                                textDecorationLine: "underline"
                              }}
                            >
                              {"n.meinsma@imperial.ac.uk"}
                            </span>
                            <React.Fragment>
                              {
                                " and she will be able to address the feedback, or connect you with the relevant people in the project if required. "
                              }
                            </React.Fragment>
                          </React.Fragment>
                        }
                      </Trans__>
                    </div>
                  </section>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "subpageHeader", "button"],
  pageLayout: ["pageLayout", "subpageHeader", "button"],
  subpageHeader: ["subpageHeader"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  subpageHeader: typeof SubpageHeader;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeedback__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeedback__VariantsArgs;
    args?: PlasmicFeedback__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeedback__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFeedback__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFeedback__ArgProps,
          internalVariantPropNames: PlasmicFeedback__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFeedback__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeedback";
  } else {
    func.displayName = `PlasmicFeedback.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"x1BtAZcYDoHQadMwGq1GLr"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicFeedback = Object.assign(
  // Top-level PlasmicFeedback renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    subpageHeader: makeNodeComponent("subpageHeader"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicFeedback
    internalVariantProps: PlasmicFeedback__VariantProps,
    internalArgProps: PlasmicFeedback__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFeedback;
/* prettier-ignore-end */
