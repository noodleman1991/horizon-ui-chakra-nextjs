// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x1BtAZcYDoHQadMwGq1GLr
// Component: Y3yqKabe7t4u

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x1BtAZcYDoHQadMwGq1GLr/projectcss
import sty from "./PlasmicInfoModuleRight.module.css"; // plasmic-import: Y3yqKabe7t4u/css

createPlasmicElementProxy;

export type PlasmicInfoModuleRight__VariantMembers = {};
export type PlasmicInfoModuleRight__VariantsArgs = {};
type VariantPropType = keyof PlasmicInfoModuleRight__VariantsArgs;
export const PlasmicInfoModuleRight__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInfoModuleRight__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicInfoModuleRight__ArgsType;
export const PlasmicInfoModuleRight__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicInfoModuleRight__OverridesType = {
  collaborate?: Flex__<"section">;
  columns?: Flex__<"div">;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultInfoModuleRightProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInfoModuleRight__RenderFunc(props: {
  variants: PlasmicInfoModuleRight__VariantsArgs;
  args: PlasmicInfoModuleRight__ArgsType;
  overrides: PlasmicInfoModuleRight__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $translator = usePlasmicTranslator?.();
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <section
      data-plasmic-name={"collaborate"}
      data-plasmic-override={overrides.collaborate}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.collaborate
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__mwuEa)}>
          <div className={classNames(projectcss.all, sty.freeBox__sRyoE)}>
            {renderPlasmicSlot({
              defaultContents: (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__qNell)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"316px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/dev_goh/images/peoplepng.png",
                    fullWidth: 1370,
                    fullHeight: 981,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot3
            })}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__hzp3)}>
          <div className={classNames(projectcss.all, sty.freeBox__kt7Wz)}>
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tweit
                  )}
                >
                  <Trans__>
                    {
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-qrT8uUlt7cMG)" }}
                        >
                          {
                            "Facilitating meaningful connection and collaboration"
                          }
                        </span>
                      </React.Fragment>
                    }
                  </Trans__>
                </div>
              ),
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jfEnU)}>
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o4ZGx
                  )}
                >
                  <Trans__>
                    {
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 500 }}
                        >
                          {
                            "Whether you're seeking expertise for a project, looking to join forces on research, or wanting to share innovative ideas, our Collaborate area is meeting place for individuals and organizations from various fields to connect and collaborate with each other. "
                          }
                        </span>
                      </React.Fragment>
                    }
                  </Trans__>
                </div>
              ),
              value: args.slot,
              className: classNames(sty.slotTargetSlot)
            })}
          </div>
          <AntdButton
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            danger={false}
            ghost={false}
            href={"https://www.connectingclimateminds.org/about"}
            size={"small"}
            target={true}
            type={"primary"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__vmY6Q)}>
              {renderPlasmicSlot({
                defaultContents: <Trans__>{"Find Collaborations"}</Trans__>,
                value: args.slot2,
                className: classNames(sty.slotTargetSlot2)
              })}
            </div>
          </AntdButton>
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  collaborate: ["collaborate", "columns", "button"],
  columns: ["columns", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  collaborate: "section";
  columns: "div";
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInfoModuleRight__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInfoModuleRight__VariantsArgs;
    args?: PlasmicInfoModuleRight__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInfoModuleRight__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInfoModuleRight__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInfoModuleRight__ArgProps,
          internalVariantPropNames: PlasmicInfoModuleRight__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInfoModuleRight__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "collaborate") {
    func.displayName = "PlasmicInfoModuleRight";
  } else {
    func.displayName = `PlasmicInfoModuleRight.${nodeName}`;
  }
  return func;
}

export const PlasmicInfoModuleRight = Object.assign(
  // Top-level PlasmicInfoModuleRight renders the root element
  makeNodeComponent("collaborate"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicInfoModuleRight
    internalVariantProps: PlasmicInfoModuleRight__VariantProps,
    internalArgProps: PlasmicInfoModuleRight__ArgProps
  }
);

export default PlasmicInfoModuleRight;
/* prettier-ignore-end */
