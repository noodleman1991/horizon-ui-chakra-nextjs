// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x1BtAZcYDoHQadMwGq1GLr
// Component: 6OHSDvpCta7y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import InfoModuleRight from "../../InfoModuleRight"; // plasmic-import: Y3yqKabe7t4u/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x1BtAZcYDoHQadMwGq1GLr/projectcss
import sty from "./PlasmicInfoModuleLeft.module.css"; // plasmic-import: 6OHSDvpCta7y/css

createPlasmicElementProxy;

export type PlasmicInfoModuleLeft__VariantMembers = {};
export type PlasmicInfoModuleLeft__VariantsArgs = {};
type VariantPropType = keyof PlasmicInfoModuleLeft__VariantsArgs;
export const PlasmicInfoModuleLeft__VariantProps = new Array<VariantPropType>();

export type PlasmicInfoModuleLeft__ArgsType = {};
type ArgPropType = keyof PlasmicInfoModuleLeft__ArgsType;
export const PlasmicInfoModuleLeft__ArgProps = new Array<ArgPropType>();

export type PlasmicInfoModuleLeft__OverridesType = {
  root?: Flex__<typeof InfoModuleRight>;
};

export interface DefaultInfoModuleLeftProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInfoModuleLeft__RenderFunc(props: {
  variants: PlasmicInfoModuleLeft__VariantsArgs;
  args: PlasmicInfoModuleLeft__ArgsType;
  overrides: PlasmicInfoModuleLeft__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $translator = usePlasmicTranslator?.();
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <InfoModuleRight
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      slot={
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wk4Cn
          )}
        >
          <Trans__>
            {
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 500 }}
                >
                  {
                    "What is Connecting Climate Minds all about? The short answer: Connection. Connecting Climate Minds is working to foster connections between people all over the world to come together to understand and respond to the deep interconnections between climate change and mental health."
                  }
                </span>
              </React.Fragment>
            }
          </Trans__>
        </div>
      }
      slot2={<Trans__>{"Learn more "}</Trans__>}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___5PagA
        )}
      >
        <Trans__>
          {
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "var(--token-qrT8uUlt7cMG)" }}
              >
                {"Connecting Climate Minds Project "}
              </span>
            </React.Fragment>
          }
        </Trans__>
      </div>
    </InfoModuleRight>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof InfoModuleRight;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInfoModuleLeft__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInfoModuleLeft__VariantsArgs;
    args?: PlasmicInfoModuleLeft__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInfoModuleLeft__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInfoModuleLeft__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInfoModuleLeft__ArgProps,
          internalVariantPropNames: PlasmicInfoModuleLeft__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInfoModuleLeft__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInfoModuleLeft";
  } else {
    func.displayName = `PlasmicInfoModuleLeft.${nodeName}`;
  }
  return func;
}

export const PlasmicInfoModuleLeft = Object.assign(
  // Top-level PlasmicInfoModuleLeft renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicInfoModuleLeft
    internalVariantProps: PlasmicInfoModuleLeft__VariantProps,
    internalArgProps: PlasmicInfoModuleLeft__ArgProps
  }
);

export default PlasmicInfoModuleLeft;
/* prettier-ignore-end */
