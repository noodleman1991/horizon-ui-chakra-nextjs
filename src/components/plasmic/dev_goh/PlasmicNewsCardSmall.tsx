// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x1BtAZcYDoHQadMwGq1GLr
// Component: 9xivxL9ZpqQa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x1BtAZcYDoHQadMwGq1GLr/projectcss
import sty from "./PlasmicNewsCardSmall.module.css"; // plasmic-import: 9xivxL9ZpqQa/css

createPlasmicElementProxy;

export type PlasmicNewsCardSmall__VariantMembers = {};
export type PlasmicNewsCardSmall__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewsCardSmall__VariantsArgs;
export const PlasmicNewsCardSmall__VariantProps = new Array<VariantPropType>();

export type PlasmicNewsCardSmall__ArgsType = {
  children?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicNewsCardSmall__ArgsType;
export const PlasmicNewsCardSmall__ArgProps = new Array<ArgPropType>(
  "children",
  "slot2"
);

export type PlasmicNewsCardSmall__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultNewsCardSmallProps {
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewsCardSmall__RenderFunc(props: {
  variants: PlasmicNewsCardSmall__VariantsArgs;
  args: PlasmicNewsCardSmall__ArgsType;
  overrides: PlasmicNewsCardSmall__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $translator = usePlasmicTranslator?.();
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__tn8Cn)}>
        {renderPlasmicSlot({
          defaultContents: (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__hs63)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"30%"}
              loading={"lazy"}
            />
          ),

          value: args.slot2
        })}
        <div className={classNames(projectcss.all, sty.freeBox__o8Ek)}>
          <div className={classNames(projectcss.all, sty.freeBox__elB0B)}>
            {renderPlasmicSlot({
              defaultContents: <Trans__>{"Enter some text"}</Trans__>,
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewsCardSmall__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewsCardSmall__VariantsArgs;
    args?: PlasmicNewsCardSmall__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewsCardSmall__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewsCardSmall__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewsCardSmall__ArgProps,
          internalVariantPropNames: PlasmicNewsCardSmall__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewsCardSmall__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewsCardSmall";
  } else {
    func.displayName = `PlasmicNewsCardSmall.${nodeName}`;
  }
  return func;
}

export const PlasmicNewsCardSmall = Object.assign(
  // Top-level PlasmicNewsCardSmall renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNewsCardSmall
    internalVariantProps: PlasmicNewsCardSmall__VariantProps,
    internalArgProps: PlasmicNewsCardSmall__ArgProps
  }
);

export default PlasmicNewsCardSmall;
/* prettier-ignore-end */
