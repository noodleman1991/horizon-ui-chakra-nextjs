// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x1BtAZcYDoHQadMwGq1GLr
// Component: 4IQmciLZjLat

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x1BtAZcYDoHQadMwGq1GLr/projectcss
import sty from "./PlasmicInfoModuleLeft2.module.css"; // plasmic-import: 4IQmciLZjLat/css

createPlasmicElementProxy;

export type PlasmicInfoModuleLeft2__VariantMembers = {};
export type PlasmicInfoModuleLeft2__VariantsArgs = {};
type VariantPropType = keyof PlasmicInfoModuleLeft2__VariantsArgs;
export const PlasmicInfoModuleLeft2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInfoModuleLeft2__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicInfoModuleLeft2__ArgsType;
export const PlasmicInfoModuleLeft2__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicInfoModuleLeft2__OverridesType = {
  welcomeToHub?: Flex__<"section">;
};

export interface DefaultInfoModuleLeft2Props {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInfoModuleLeft2__RenderFunc(props: {
  variants: PlasmicInfoModuleLeft2__VariantsArgs;
  args: PlasmicInfoModuleLeft2__ArgsType;
  overrides: PlasmicInfoModuleLeft2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $translator = usePlasmicTranslator?.();
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <section
      data-plasmic-name={"welcomeToHub"}
      data-plasmic-override={overrides.welcomeToHub}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.welcomeToHub
      )}
    >
      <div className={classNames(projectcss.all, sty.columns___5Cl0)}>
        <div className={classNames(projectcss.all, sty.column__mVlYv)}>
          <div className={classNames(projectcss.all, sty.columns__eyxFl)}>
            <div className={classNames(projectcss.all, sty.column__qrKbm)}>
              <div className={classNames(projectcss.all, sty.freeBox__hL3B)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z8Uwi
                      )}
                    >
                      <Trans__>
                        {
                          <React.Fragment>
                            <React.Fragment>{"Welcome to the "}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-n-FzbhxKb_Pn)" }}
                            >
                              {"Connecting Climate Minds Hub"}
                            </span>
                            <React.Fragment>
                              {
                                ", where the worlds of mental health and climate change research and policy unite. "
                              }
                            </React.Fragment>
                          </React.Fragment>
                        }
                      </Trans__>
                    </div>
                  ),
                  value: args.children,
                  className: classNames(sty.slotTargetChildren)
                })}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kcVRt)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__alOy3
                      )}
                    >
                      <Trans__>
                        {
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "We are dedicated to catalysing and fostering a connected global community, all driven by a common goal:"
                              }
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {" "}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 500 }}
                            >
                              {
                                "understanding and addressing the intricate relationship between our planet's changing climate and our mental wellbeing. "
                              }
                            </span>
                          </React.Fragment>
                        }
                      </Trans__>
                    </div>
                  ),
                  value: args.slot,
                  className: classNames(sty.slotTargetSlot)
                })}
              </div>
              {renderPlasmicSlot({
                defaultContents: (
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__oqpxe)}
                    danger={false}
                    ghost={false}
                    size={"medium"}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zxRgU
                      )}
                    >
                      <Trans__>{"Create an Account"}</Trans__>
                    </div>
                  </AntdButton>
                ),
                value: args.slot2
              })}
            </div>
            <div className={classNames(projectcss.all, sty.column__jSoRo)}>
              <div className={classNames(projectcss.all, sty.freeBox__pMcy9)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vhCwl)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"316px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/dev_goh/images/infinitypng.png",
                        fullWidth: 1370,
                        fullHeight: 1043,
                        aspectRatio: undefined
                      }}
                    />
                  ),

                  value: args.slot3
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  welcomeToHub: ["welcomeToHub"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  welcomeToHub: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInfoModuleLeft2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInfoModuleLeft2__VariantsArgs;
    args?: PlasmicInfoModuleLeft2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInfoModuleLeft2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInfoModuleLeft2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInfoModuleLeft2__ArgProps,
          internalVariantPropNames: PlasmicInfoModuleLeft2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInfoModuleLeft2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "welcomeToHub") {
    func.displayName = "PlasmicInfoModuleLeft2";
  } else {
    func.displayName = `PlasmicInfoModuleLeft2.${nodeName}`;
  }
  return func;
}

export const PlasmicInfoModuleLeft2 = Object.assign(
  // Top-level PlasmicInfoModuleLeft2 renders the root element
  makeNodeComponent("welcomeToHub"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicInfoModuleLeft2
    internalVariantProps: PlasmicInfoModuleLeft2__VariantProps,
    internalArgProps: PlasmicInfoModuleLeft2__ArgProps
  }
);

export default PlasmicInfoModuleLeft2;
/* prettier-ignore-end */
